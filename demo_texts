<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Employee Data Table</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="data.js" defer></script>
</head>
<body>
  <div class="container mt-5">
    <h1>Employee Data</h1>
    <table id="employeeTable" class="table table-striped">
      <thead>
        <tr id="tableHeaders">
          <!-- Table headers will be dynamically populated -->
        </tr>
      </thead>
      <tbody id="tableBody">
        <!-- Table body will be dynamically populated -->
      </tbody>
    </table>
    <nav>
      <ul class="pagination justify-content-center" id="pagination">
        <!-- Pagination links with arrows will be dynamically populated -->
      </ul>
    </nav>
    <div class="text-center">
      <p>Total Employees: <span id="totalEmployees"></span></p>
      <p>Page <span id="currentPage"></span> of <span id="totalPages"></span></p>
    </div>
  </div>

  <script>
    const pageSize = 5; // Number of rows per page
    let currentPage = 1;

    // Function to create table headers
    function createTableHeaders() {
      const headersRow = document.querySelector("#tableHeaders");
      const headers = Object.keys(jsonData[0]);
      headers.forEach(header => {
        const th = document.createElement("th");
        th.textContent = header.charAt(0).toUpperCase() + header.slice(1); // Capitalize first letter
        headersRow.appendChild(th);
      });
    }

    // Function to populate table body with data
    function populateTableBody() {
      const tableBody = document.querySelector("#tableBody");
      tableBody.innerHTML = "";
      const startIndex = (currentPage - 1) * pageSize;
      const endIndex = Math.min(startIndex + pageSize, jsonData.length);

      for (let i = startIndex; i < endIndex; i++) {
        const employee = jsonData[i];
        const row = document.createElement("tr");
        Object.values(employee).forEach(value => {
          const td = document.createElement("td");
          td.textContent = value;
          row.appendChild(td);
        });
        tableBody.appendChild(row);
      }
    }

    // Function to create pagination links
    function createPagination() {
      const pagination = document.querySelector("#pagination");
      pagination.innerHTML = "";

      const numPages = Math.ceil(jsonData.length / pageSize);
      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(numPages, startPage + 4);
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }

      // Previous arrow
      const prevLi = document.createElement("li");
      prevLi.classList.add("page-item");
      const prevLink = document.createElement("a");
      prevLink.classList.add("page-link");
      prevLink.innerHTML = '&laquo;';
      prevLink.href = "#";
      prevLink.addEventListener("click", function () {
        if (currentPage > 1) {
          currentPage--;
          populateTableBody();
          updatePaginationText();
          createPagination();
        }
      });
      prevLi.appendChild(prevLink);
      pagination.appendChild(prevLi);

      for (let i = startPage; i <= endPage; i++) {
        const li = document.createElement("li");
        li.classList.add("page-item");
        const a = document.createElement("a");
        a.classList.add("page-link");
        a.textContent = i;
        a.href = "#";
        a.addEventListener("click", function () {
          currentPage = i;
          populateTableBody();
          updatePaginationText();
          createPagination();
        });
        li.appendChild(a);
        pagination.appendChild(li);
      }

      // Next arrow
      const nextLi = document.createElement("li");
      nextLi.classList.add("page-item");
      const nextLink = document.createElement("a");
      nextLink.classList.add("page-link");
      nextLink.innerHTML = '&raquo;';
      nextLink.href = "#";
      nextLink.addEventListener("click", function () {
        if (currentPage < numPages) {
          currentPage++;
          populateTableBody();
          updatePaginationText();
          createPagination();
        }
      });
      nextLi.appendChild(nextLink);
      pagination.appendChild(nextLi);

      highlightCurrentPage();
      updatePaginationText();
    }

    // Function to highlight current page in pagination
    function highlightCurrentPage() {
      const paginationLinks = document.querySelectorAll("#pagination li");
      paginationLinks.forEach((link, index) => {
        if (index === currentPage) {
          link.classList.add("active");
        } else {
          link.classList.remove("active");
        }
      });
    }

    // Function to update total employees and page count text
    function updatePaginationText() {
      const totalEmployeesElement = document.getElementById("totalEmployees");
      const totalPagesElement = document.getElementById("totalPages");
      const currentPageElement = document.getElementById("currentPage");

      totalEmployeesElement.textContent = jsonData.length;
      totalPagesElement.textContent = Math.ceil(jsonData.length / pageSize);
      currentPageElement.textContent = currentPage;
    }

    // Execute functions when DOM content is loaded
    document.addEventListener("DOMContentLoaded", function () {
      createTableHeaders();
      populateTableBody();
      createPagination();
    });
  </script>
</body>
</html>
