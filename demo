<!-- Parent Website (parent.html) -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Parent Website</title>
  <style>
    #childFrame {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 300px;
      height: 250px;
      border: 1px solid #ccc;
      box-shadow: 0 0 10px rgba(0,0,0,0.3);
      z-index: 9999;
    }
  </style>
  <script>
    function sendActivity(eventType, details) {
      const payload = { eventType, details, timestamp: new Date().toISOString() };
      const iframe = document.getElementById('childFrame');
      if (iframe && iframe.contentWindow) {
        iframe.contentWindow.postMessage(payload, '*');
      }

      fetch('https://your-backend-api.com/track', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      }).catch(err => console.error('Error sending data to backend:', err));
    }

    function robustClickHandler(event) {
      const el = event.target;
      if (el && typeof el.id === 'string' && el.id.trim()) {
        sendActivity('Click', `Element: ${el.tagName} | ID: ${el.id}`);
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.addEventListener('click', robustClickHandler, true);

      document.addEventListener('input', (event) => {
        const el = event.target;
        if (el && el.id) {
          sendActivity('Input Change', `Element: ${el.tagName} | ID: ${el.id} | Value: ${el.value}`);
        }
      }, true);

      document.addEventListener('mousemove', (event) => {
        sendActivity('Mouse Move', `Coordinates: X=${event.clientX}, Y=${event.clientY}`);
      }, true);

      document.addEventListener('scroll', () => {
        sendActivity('Scroll', 'User scrolled the page');
      }, { passive: true });

      window.addEventListener('beforeunload', (event) => {
        sendActivity('Navigation', 'User is leaving or refreshing the page');
      });

      window.addEventListener('popstate', () => {
        sendActivity('Navigation', 'User navigated via browser back/forward');
      });

      window.addEventListener('keydown', (event) => {
        if ((event.ctrlKey || event.metaKey) && event.key === 'p') {
          sendActivity('Print Action', 'User triggered print dialog');
        }
      });
    });
  </script>
</head>
<body>
  <h1>Parent Website (Fully Functional)</h1>
  <p>Try clicking, typing, or scrolling and see the iframe update.</p>
  <button id="btn1">Click Me</button>
  <input type="text" id="input1" placeholder="Type something...">
  <input type="checkbox" id="checkbox1"> Checkbox Example
  <input type="radio" name="radioGroup" id="radio1"> Radio 1
  <input type="radio" name="radioGroup" id="radio2"> Radio 2
  <a href="#" id="link1">Example Link</a>
  <img src="example.jpg" id="image1" alt="Sample Image" width="100">
  <div style="height: 1000px; background: lightgray;">Scroll here...</div>
  <iframe id="childFrame" src="child.html"></iframe>
</body>
</html>

<!-- Child Tracking Page (child.html) -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Activity Tracker</title>
  <style>
    html, body {
      font-family: sans-serif;
      margin: 0;
      padding: 10px;
      box-sizing: border-box;
      overflow: hidden;
    }
    #output {
      border: 1px solid #000;
      padding: 10px;
      height: 200px;
      font-size: 12px;
      background: #f9f9f9;
    }
  </style>
  <script>
    window.addEventListener('message', (event) => {
      if (event.data && event.data.eventType) {
        const output = document.getElementById('output');
        const newEvent = document.createElement('p');
        newEvent.textContent = `${event.data.timestamp || ''} | ${event.data.eventType}: ${event.data.details}`;
        output.appendChild(newEvent);

        localStorage.setItem('activityLog', output.innerHTML);
      }
    });

    window.addEventListener('DOMContentLoaded', () => {
      const savedLogs = localStorage.getItem('activityLog');
      if (savedLogs) {
        document.getElementById('output').innerHTML = savedLogs;
      }
    });
  </script>
</head>
<body>
  <div id="output">
    <p>Waiting for user interactions...</p>
  </div>
</body>
</html>
